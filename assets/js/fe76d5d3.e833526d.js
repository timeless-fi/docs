"use strict";(self.webpackChunkbunni_docs=self.webpackChunkbunni_docs||[]).push([[224],{3905:(e,t,a)=>{a.d(t,{Zo:()=>k,kt:()=>s});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),d=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},k=function(e){var t=d(e.components);return n.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,k=o(e,["components","mdxType","originalType","parentName"]),c=d(a),s=r,m=c["".concat(u,".").concat(s)]||c[s]||p[s]||l;return a?n.createElement(m,i(i({ref:t},k),{},{components:a})):n.createElement(m,i({ref:t},k))}));function s(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},240:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const l={title:"BunniToken",hide_table_of_contents:!1,sidebar_position:3},i="BunniToken",o={unversionedId:"v2/technical/core/token",id:"v2/technical/core/token",title:"BunniToken",description:"BunniToken is an ERC20 token contract that represents a user's Liquidity Provider (LP) position in the Bunni ecosystem. It extends the standard ERC20 functionality with additional features such as referral rewards, account locking, and metadata management.",source:"@site/docs/v2/technical/core/token.md",sourceDirName:"v2/technical/core",slug:"/v2/technical/core/token",permalink:"/docs/v2/technical/core/token",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"BunniToken",hide_table_of_contents:!1,sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"BunniHook",permalink:"/docs/v2/technical/core/hook"},next:{title:"BunnZone",permalink:"/docs/v2/technical/core/zone"}},u={},d=[{value:"Inheritance",id:"inheritance",level:2},{value:"State Variables",id:"state-variables",level:2},{value:"metadataURI",id:"metadatauri",level:3},{value:"Functions",id:"functions",level:2},{value:"hub",id:"hub",level:3},{value:"token0",id:"token0",level:3},{value:"token1",id:"token1",level:3},{value:"poolManager",id:"poolmanager",level:3},{value:"mint",id:"mint",level:3},{value:"burn (from BunniHub)",id:"burn-from-bunnihub",level:3},{value:"burn (from user)",id:"burn-from-user",level:3},{value:"initialize",id:"initialize",level:3},{value:"setMetadataURI",id:"setmetadatauri",level:3},{value:"distributeReferralRewards",id:"distributereferralrewards",level:3},{value:"claimReferralRewards",id:"claimreferralrewards",level:3},{value:"getClaimableReferralRewards",id:"getclaimablereferralrewards",level:3},{value:"scoreOf",id:"scoreof",level:3},{value:"referrerOf",id:"referrerof",level:3},{value:"lock",id:"lock",level:3},{value:"unlock",id:"unlock",level:3},{value:"isLocked",id:"islocked",level:3},{value:"unlockerOf",id:"unlockerof",level:3},{value:"Events",id:"events",level:2},{value:"SetMetadataURI",id:"setmetadatauri-1",level:3},{value:"Lock",id:"lock-1",level:3},{value:"Unlock",id:"unlock-1",level:3}],k={toc:d};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bunnitoken"},"BunniToken"),(0,r.kt)("p",null,"BunniToken is an ERC20 token contract that represents a user's Liquidity Provider (LP) position in the Bunni ecosystem. It extends the standard ERC20 functionality with additional features such as referral rewards, account locking, and metadata management."),(0,r.kt)("h2",{id:"inheritance"},"Inheritance"),(0,r.kt)("p",null,"BunniToken inherits from the following interfaces:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"IERC20: Standard ERC20 interface"),(0,r.kt)("li",{parentName:"ul"},"IERC20Referrer: Interface for tracking referrers of token holders"),(0,r.kt)("li",{parentName:"ul"},"IERC20Lockable: Interface for account locking, which is useful for implementing transferless staking contracts"),(0,r.kt)("li",{parentName:"ul"},"IOwnable: Interface for ownership management"),(0,r.kt)("li",{parentName:"ul"},"IUnlockCallback: Uniswap v4 unlock callback interface")),(0,r.kt)("h2",{id:"state-variables"},"State Variables"),(0,r.kt)("h3",{id:"metadatauri"},"metadataURI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"string public metadataURI;\n")),(0,r.kt)("p",null,"A URI pointing to the metadata associated with this token."),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"hub"},"hub"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function hub() external view returns (IBunniHub);\n")),(0,r.kt)("p",null,"Returns the address of the BunniHub contract associated with this token."),(0,r.kt)("h3",{id:"token0"},"token0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function token0() external view returns (Currency);\n")),(0,r.kt)("p",null,"Returns the address of the first token in the pair."),(0,r.kt)("h3",{id:"token1"},"token1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function token1() external view returns (Currency);\n")),(0,r.kt)("p",null,"Returns the address of the second token in the pair."),(0,r.kt)("h3",{id:"poolmanager"},"poolManager"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function poolManager() external view returns (IPoolManager);\n")),(0,r.kt)("p",null,"Returns the address of the Uniswap v4 PoolManager contract associated with this token."),(0,r.kt)("h3",{id:"mint"},"mint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function mint(address to, uint256 amount, uint24 referrer) external;\n")),(0,r.kt)("p",null,"Mints new tokens to the specified address. Can only be called by the BunniHub contract."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"to"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address to receive the minted tokens")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of tokens to mint")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"referrer"),(0,r.kt)("td",{parentName:"tr",align:null},"uint24"),(0,r.kt)("td",{parentName:"tr",align:null},"The referrer ID associated with this mint operation")))),(0,r.kt)("h3",{id:"burn-from-bunnihub"},"burn (from BunniHub)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function burn(address from, uint256 amount) external;\n")),(0,r.kt)("p",null,"Burns tokens from a specified address. Can only be called by the BunniHub contract."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"from"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address to burn tokens from")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of tokens to burn")))),(0,r.kt)("h3",{id:"burn-from-user"},"burn (from user)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function burn(uint256 amount) external;\n")),(0,r.kt)("p",null,"Burns tokens from the caller's address."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of tokens to burn")))),(0,r.kt)("h3",{id:"initialize"},"initialize"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize(address owner_, string calldata metadataURI_) external;\n")),(0,r.kt)("p",null,"Initializes the BunniToken contract. Can only be called once, typically by the BunniHub contract during deployment."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"owner","_"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The initial owner of the contract")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"metadataURI","_"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The initial metadata URI for the token")))),(0,r.kt)("h3",{id:"setmetadatauri"},"setMetadataURI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function setMetadataURI(string calldata metadataURI_) external;\n")),(0,r.kt)("p",null,"Sets the metadata URI for the token. Can only be called by the contract owner."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"metadataURI","_"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The new URI for token metadata")))),(0,r.kt)("h3",{id:"distributereferralrewards"},"distributeReferralRewards"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function distributeReferralRewards(bool isToken0, uint256 amount) external;\n")),(0,r.kt)("p",null,"Distributes referral rewards to all referrers. Can be called by anyone, but typically called by the hook contract."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isToken0"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the rewards are in token0 or token1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of rewards to distribute")))),(0,r.kt)("h3",{id:"claimreferralrewards"},"claimReferralRewards"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function claimReferralRewards(uint24 referrer) external returns (uint256 reward0, uint256 reward1);\n")),(0,r.kt)("p",null,"Claims referral rewards for a given referrer ID. Can be called by anyone."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"referrer"),(0,r.kt)("td",{parentName:"tr",align:null},"uint24"),(0,r.kt)("td",{parentName:"tr",align:null},"The referrer ID to claim rewards for")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reward0"),": The amount of token0 rewards claimed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reward1"),": The amount of token1 rewards claimed")),(0,r.kt)("h3",{id:"getclaimablereferralrewards"},"getClaimableReferralRewards"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function getClaimableReferralRewards(uint24 referrer) external view returns (uint256 reward0, uint256 reward1);\n")),(0,r.kt)("p",null,"Returns the amount of referral rewards claimable by a given referrer ID."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"referrer"),(0,r.kt)("td",{parentName:"tr",align:null},"uint24"),(0,r.kt)("td",{parentName:"tr",align:null},"The referrer ID to check rewards for")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reward0"),": The amount of token0 rewards claimable"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reward1"),": The amount of token1 rewards claimable")),(0,r.kt)("h3",{id:"scoreof"},"scoreOf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function scoreOf(uint24 referrer) external view returns (uint256 score);\n")),(0,r.kt)("p",null,"Returns the score of a referrer. The score is the sum of all balances of accounts that have the referrer as their referrer."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"referrer"),(0,r.kt)("td",{parentName:"tr",align:null},"uint24"),(0,r.kt)("td",{parentName:"tr",align:null},"The referrer whose score is to be returned")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"score"),": The score of the referrer")),(0,r.kt)("h3",{id:"referrerof"},"referrerOf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function referrerOf(address account) external view returns (uint24 referrer);\n")),(0,r.kt)("p",null,"Returns the referrer of an account. Default referrer is 0."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"account"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The account whose referrer is to be returned")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"referrer"),": The referrer of the account")),(0,r.kt)("h3",{id:"lock"},"lock"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function lock(IERC20Unlocker unlocker, bytes calldata data) external;\n")),(0,r.kt)("p",null,"Locks the caller's account, preventing any transfers from the account until it's unlocked."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unlocker"),(0,r.kt)("td",{parentName:"tr",align:null},"IERC20Unlocker"),(0,r.kt)("td",{parentName:"tr",align:null},"The address that will be able to unlock the account")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes"),(0,r.kt)("td",{parentName:"tr",align:null},"Additional data with no specified format")))),(0,r.kt)("h3",{id:"unlock"},"unlock"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function unlock(address account) external;\n")),(0,r.kt)("p",null,"Unlocks a previously locked account. Can only be called by the designated unlocker for the account."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"account"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The account to unlock")))),(0,r.kt)("h3",{id:"islocked"},"isLocked"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function isLocked(address account) external view returns (bool);\n")),(0,r.kt)("p",null,"Checks if an account is locked."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"account"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The account to check")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bool"),": True if the account is locked, false otherwise")),(0,r.kt)("h3",{id:"unlockerof"},"unlockerOf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function unlockerOf(address account) external view returns (IERC20Unlocker unlocker);\n")),(0,r.kt)("p",null,"Returns the unlocker of an account."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"account"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The account whose unlocker is to be returned")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unlocker"),": The unlocker of the account")),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("h3",{id:"setmetadatauri-1"},"SetMetadataURI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event SetMetadataURI(string newURI);\n")),(0,r.kt)("p",null,"Emitted when the metadata URI is updated."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"newURI"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The new metadata URI")))),(0,r.kt)("h3",{id:"lock-1"},"Lock"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event Lock(address indexed account, IERC20Unlocker indexed unlocker);\n")),(0,r.kt)("p",null,"Emitted when an account is locked."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Indexed"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"account"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"The account that was locked")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unlocker"),(0,r.kt)("td",{parentName:"tr",align:null},"IERC20Unlocker"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"The address designated as the unlocker for the account")))),(0,r.kt)("h3",{id:"unlock-1"},"Unlock"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event Unlock(address indexed account, IERC20Unlocker indexed unlocker);\n")),(0,r.kt)("p",null,"Emitted when an account is unlocked."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Indexed"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"account"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"The account that was unlocked")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unlocker"),(0,r.kt)("td",{parentName:"tr",align:null},"IERC20Unlocker"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"The address that performed the unlock operation")))))}p.isMDXComponent=!0}}]);