"use strict";(self.webpackChunkbunni_docs=self.webpackChunkbunni_docs||[]).push([[5585],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>s});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),u=p(a),s=r,N=u["".concat(o,".").concat(s)]||u[s]||k[s]||l;return a?n.createElement(N,i(i({ref:t},m),{},{components:a})):n.createElement(N,i({ref:t},m))}));function s(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:r,i[1]=d;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1449:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const l={title:"BunniHook",hide_table_of_contents:!1,sidebar_position:2},i="BunniHook",d={unversionedId:"v2/technical/core/hook",id:"v2/technical/core/hook",title:"BunniHook",description:"BunniHook is a Uniswap v4 hook responsible for handling swaps on Bunni. It implements auto-rebalancing executed via FloodPlain and uses am-AMM to recapture LVR & MEV.",source:"@site/docs/v2/technical/core/hook.md",sourceDirName:"v2/technical/core",slug:"/v2/technical/core/hook",permalink:"/docs/v2/technical/core/hook",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"BunniHook",hide_table_of_contents:!1,sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"BunniHub",permalink:"/docs/v2/technical/core/hub"},next:{title:"BunniToken",permalink:"/docs/v2/technical/core/token"}},o={},p=[{value:"Structs and Enums",id:"structs-and-enums",level:2},{value:"BoolOverride",id:"booloverride",level:3},{value:"ObservationState",id:"observationstate",level:3},{value:"RebalanceOrderHookArgs",id:"rebalanceorderhookargs",level:3},{value:"RebalanceOrderPreHookArgs",id:"rebalanceorderprehookargs",level:3},{value:"RebalanceOrderPostHookArgs",id:"rebalanceorderposthookargs",level:3},{value:"Functions",id:"functions",level:2},{value:"getObservation",id:"getobservation",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Return Value:",id:"return-value",level:4},{value:"getState",id:"getstate",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"Return Value:",id:"return-value-1",level:4},{value:"observe",id:"observe",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"Return Value:",id:"return-value-2",level:4},{value:"isValidParams",id:"isvalidparams",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"Return Value:",id:"return-value-3",level:4},{value:"ldfStates",id:"ldfstates",level:3},{value:"Parameters:",id:"parameters-4",level:4},{value:"Return Value:",id:"return-value-4",level:4},{value:"slot0s",id:"slot0s",level:3},{value:"Parameters:",id:"parameters-5",level:4},{value:"Return Values:",id:"return-values",level:4},{value:"vaultSharePricesAtLastSwap",id:"vaultsharepricesatlastswap",level:3},{value:"Parameters:",id:"parameters-6",level:4},{value:"Return Values:",id:"return-values-1",level:4},{value:"getAmAmmEnabled",id:"getamammenabled",level:3},{value:"Parameters:",id:"parameters-7",level:4},{value:"Return Value:",id:"return-value-5",level:4},{value:"increaseCardinalityNext",id:"increasecardinalitynext",level:3},{value:"Parameters:",id:"parameters-8",level:4},{value:"Return Values:",id:"return-values-2",level:4},{value:"updateLdfState",id:"updateldfstate",level:3},{value:"Parameters:",id:"parameters-9",level:4},{value:"claimProtocolFees",id:"claimprotocolfees",level:3},{value:"Parameters:",id:"parameters-10",level:4},{value:"setZone",id:"setzone",level:3},{value:"Parameters:",id:"parameters-11",level:4},{value:"setModifiers",id:"setmodifiers",level:3},{value:"Parameters:",id:"parameters-12",level:4},{value:"setAmAmmEnabledOverride",id:"setamammenabledoverride",level:3},{value:"Parameters:",id:"parameters-13",level:4},{value:"setGlobalAmAmmEnabledOverride",id:"setglobalamammenabledoverride",level:3},{value:"Parameters:",id:"parameters-14",level:4},{value:"rebalanceOrderPreHook",id:"rebalanceorderprehook",level:3},{value:"Parameters:",id:"parameters-15",level:4},{value:"rebalanceOrderPostHook",id:"rebalanceorderposthook",level:3},{value:"Parameters:",id:"parameters-16",level:4},{value:"Events",id:"events",level:2},{value:"Swap",id:"swap",level:3},{value:"Parameters:",id:"parameters-17",level:4},{value:"SetZone",id:"setzone-1",level:3},{value:"Parameters:",id:"parameters-18",level:4},{value:"SetModifiers",id:"setmodifiers-1",level:3},{value:"Parameters:",id:"parameters-19",level:4},{value:"SetAmAmmEnabledOverride",id:"setamammenabledoverride-1",level:3},{value:"Parameters:",id:"parameters-20",level:4},{value:"SetGlobalAmAmmEnabledOverride",id:"setglobalamammenabledoverride-1",level:3},{value:"Parameters:",id:"parameters-21",level:4},{value:"Swap",id:"swap-1",level:3},{value:"Parameters:",id:"parameters-22",level:4},{value:"SetZone",id:"setzone-2",level:3},{value:"Parameters:",id:"parameters-23",level:4},{value:"SetHookFeeModifier",id:"sethookfeemodifier",level:3},{value:"Parameters:",id:"parameters-24",level:4},{value:"SetAmAmmEnabledOverride",id:"setamammenabledoverride-2",level:3},{value:"Parameters:",id:"parameters-25",level:4},{value:"SetGlobalAmAmmEnabledOverride",id:"setglobalamammenabledoverride-2",level:3},{value:"Parameters:",id:"parameters-26",level:4}],m={toc:p};function k(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bunnihook"},"BunniHook"),(0,r.kt)("p",null,"BunniHook is a Uniswap v4 hook responsible for handling swaps on Bunni. It implements auto-rebalancing executed via FloodPlain and uses am-AMM to recapture LVR & MEV."),(0,r.kt)("h2",{id:"structs-and-enums"},"Structs and Enums"),(0,r.kt)("h3",{id:"booloverride"},"BoolOverride"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"enum BoolOverride {\n    UNSET,\n    TRUE,\n    FALSE\n}\n")),(0,r.kt)("h3",{id:"observationstate"},"ObservationState"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"struct ObservationState {\n    uint32 index;\n    uint32 cardinality;\n    uint32 cardinalityNext;\n    Oracle.Observation intermediateObservation;\n}\n")),(0,r.kt)("h3",{id:"rebalanceorderhookargs"},"RebalanceOrderHookArgs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"struct RebalanceOrderHookArgs {\n    PoolKey key;\n    RebalanceOrderPreHookArgs preHookArgs;\n    RebalanceOrderPostHookArgs postHookArgs;\n}\n")),(0,r.kt)("h3",{id:"rebalanceorderprehookargs"},"RebalanceOrderPreHookArgs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"struct RebalanceOrderPreHookArgs {\n    Currency currency;\n    uint256 amount;\n}\n")),(0,r.kt)("h3",{id:"rebalanceorderposthookargs"},"RebalanceOrderPostHookArgs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"struct RebalanceOrderPostHookArgs {\n    Currency currency;\n}\n")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"getobservation"},"getObservation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function getObservation(\n    PoolKey calldata key,\n    uint256 index\n) external view returns (Oracle.Observation memory observation)\n")),(0,r.kt)("p",null,"Returns the observation for the given pool key and observation index."),(0,r.kt)("h4",{id:"parameters"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"key")),(0,r.kt)("td",{parentName:"tr",align:null},"struct PoolKey"),(0,r.kt)("td",{parentName:"tr",align:null},"The pool key")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"index")),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The observation index")))),(0,r.kt)("h4",{id:"return-value"},"Return Value:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"observation")),(0,r.kt)("td",{parentName:"tr",align:null},"Oracle.Observation"),(0,r.kt)("td",{parentName:"tr",align:null},"The observation struct")))),(0,r.kt)("h3",{id:"getstate"},"getState"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function getState(\n    PoolKey calldata key\n) external view returns (ObservationState memory state)\n")),(0,r.kt)("p",null,"Returns the TWAP oracle observation state for the given pool key."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"key")),(0,r.kt)("td",{parentName:"tr",align:null},"struct PoolKey"),(0,r.kt)("td",{parentName:"tr",align:null},"The pool key")))),(0,r.kt)("h4",{id:"return-value-1"},"Return Value:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"state")),(0,r.kt)("td",{parentName:"tr",align:null},"ObservationState"),(0,r.kt)("td",{parentName:"tr",align:null},"The state struct")))),(0,r.kt)("h3",{id:"observe"},"observe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function observe(\n    PoolKey calldata key,\n    uint32[] calldata secondsAgos\n) external view returns (int56[] memory tickCumulatives)\n")),(0,r.kt)("p",null,"Observe the given pool for the timestamps."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"key")),(0,r.kt)("td",{parentName:"tr",align:null},"struct PoolKey"),(0,r.kt)("td",{parentName:"tr",align:null},"The pool key")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"secondsAgos")),(0,r.kt)("td",{parentName:"tr",align:null},"uint32[]"),(0,r.kt)("td",{parentName:"tr",align:null},"The timestamps to observe")))),(0,r.kt)("h4",{id:"return-value-2"},"Return Value:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"tickCumulatives")),(0,r.kt)("td",{parentName:"tr",align:null},"int56[]"),(0,r.kt)("td",{parentName:"tr",align:null},"The tick cumulatives for the given timestamps")))),(0,r.kt)("h3",{id:"isvalidparams"},"isValidParams"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function isValidParams(\n    bytes calldata hookParams\n) external view returns (bool)\n")),(0,r.kt)("p",null,"Validates if the given hook params are valid."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"hookParams")),(0,r.kt)("td",{parentName:"tr",align:null},"bytes"),(0,r.kt)("td",{parentName:"tr",align:null},"The hook params")))),(0,r.kt)("h4",{id:"return-value-3"},"Return Value:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isValid")),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"True if the hook params are valid")))),(0,r.kt)("h3",{id:"ldfstates"},"ldfStates"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function ldfStates(\n    PoolId id\n) external view returns (bytes32)\n")),(0,r.kt)("p",null,"The LDF state of a given pool. Used for evaluating the LDF."),(0,r.kt)("h4",{id:"parameters-4"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"PoolId"),(0,r.kt)("td",{parentName:"tr",align:null},"The pool id")))),(0,r.kt)("h4",{id:"return-value-4"},"Return Value:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"The LDF state")))),(0,r.kt)("h3",{id:"slot0s"},"slot0s"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function slot0s(\n    PoolId id\n) external view returns (\n    uint160 sqrtPriceX96,\n    int24 tick,\n    uint32 lastSwapTimestamp,\n    uint32 lastSurgeTimestamp\n)\n")),(0,r.kt)("p",null,"The slot0 state of a given pool."),(0,r.kt)("h4",{id:"parameters-5"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"PoolId"),(0,r.kt)("td",{parentName:"tr",align:null},"The pool id")))),(0,r.kt)("h4",{id:"return-values"},"Return Values:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sqrtPriceX96")),(0,r.kt)("td",{parentName:"tr",align:null},"uint160"),(0,r.kt)("td",{parentName:"tr",align:null},"The square root price")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"tick")),(0,r.kt)("td",{parentName:"tr",align:null},"int24"),(0,r.kt)("td",{parentName:"tr",align:null},"The tick of the pool")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lastSwapTimestamp")),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"The timestamp of the last swap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lastSurgeTimestamp")),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"The timestamp of the last surge")))),(0,r.kt)("h3",{id:"vaultsharepricesatlastswap"},"vaultSharePricesAtLastSwap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function vaultSharePricesAtLastSwap(\n    PoolId id\n) external view returns (\n    bool initialized,\n    uint120 sharePrice0,\n    uint120 sharePrice1\n)\n")),(0,r.kt)("p",null,"The share prices of the vaults used by the pool at the last swap."),(0,r.kt)("h4",{id:"parameters-6"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"PoolId"),(0,r.kt)("td",{parentName:"tr",align:null},"The pool id")))),(0,r.kt)("h4",{id:"return-values-1"},"Return Values:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"initialized")),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"True if the share prices have been initialized")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sharePrice0")),(0,r.kt)("td",{parentName:"tr",align:null},"uint120"),(0,r.kt)("td",{parentName:"tr",align:null},"The underlying assets each share of vault0 represents, scaled by 1e18")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sharePrice1")),(0,r.kt)("td",{parentName:"tr",align:null},"uint120"),(0,r.kt)("td",{parentName:"tr",align:null},"The underlying assets each share of vault1 represents, scaled by 1e18")))),(0,r.kt)("h3",{id:"getamammenabled"},"getAmAmmEnabled"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function getAmAmmEnabled(\n    PoolId id\n) external view returns (bool)\n")),(0,r.kt)("p",null,"Returns whether am-AMM is enabled for the given pool."),(0,r.kt)("h4",{id:"parameters-7"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"PoolId"),(0,r.kt)("td",{parentName:"tr",align:null},"The pool id")))),(0,r.kt)("h4",{id:"return-value-5"},"Return Value:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"True if am-AMM is enabled for the pool")))),(0,r.kt)("h3",{id:"increasecardinalitynext"},"increaseCardinalityNext"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function increaseCardinalityNext(\n    PoolKey calldata key,\n    uint32 cardinalityNext\n) external returns (\n    uint32 cardinalityNextOld,\n    uint32 cardinalityNextNew\n)\n")),(0,r.kt)("p",null,"Increase the cardinality target for the given pool."),(0,r.kt)("h4",{id:"parameters-8"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"key")),(0,r.kt)("td",{parentName:"tr",align:null},"struct PoolKey"),(0,r.kt)("td",{parentName:"tr",align:null},"The pool key")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"cardinalityNext")),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"The new cardinality target")))),(0,r.kt)("h4",{id:"return-values-2"},"Return Values:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"cardinalityNextOld")),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"The old cardinality target")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"cardinalityNextNew")),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"The new cardinality target")))),(0,r.kt)("h3",{id:"updateldfstate"},"updateLdfState"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function updateLdfState(\n    PoolId id,\n    bytes32 newState\n) external\n")),(0,r.kt)("p",null,"Update the LDF state of the given pool. Only callable by BunniHub."),(0,r.kt)("h4",{id:"parameters-9"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"PoolId"),(0,r.kt)("td",{parentName:"tr",align:null},"The pool id")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"newState")),(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"The new LDF state")))),(0,r.kt)("h3",{id:"claimprotocolfees"},"claimProtocolFees"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function claimProtocolFees(\n    Currency[] calldata currencyList,\n    address recipient\n) external\n")),(0,r.kt)("p",null,"Claim protocol fees for the given currency list. Only callable by the owner."),(0,r.kt)("h4",{id:"parameters-10"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"currencyList")),(0,r.kt)("td",{parentName:"tr",align:null},"Currency[]"),(0,r.kt)("td",{parentName:"tr",align:null},"The list of currencies to claim fees for")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"recipient")),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The recipient of the fees")))),(0,r.kt)("h3",{id:"setzone"},"setZone"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function setZone(\n    IZone zone\n) external\n")),(0,r.kt)("p",null,"Set the FloodZone contract address. Only callable by the owner."),(0,r.kt)("h4",{id:"parameters-11"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"zone")),(0,r.kt)("td",{parentName:"tr",align:null},"IZone"),(0,r.kt)("td",{parentName:"tr",align:null},"The new FloodZone contract address")))),(0,r.kt)("h3",{id:"setmodifiers"},"setModifiers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function setModifiers(\n    uint32 newHookFeeModifier,\n    uint32 newReferralRewardModifier\n) external\n")),(0,r.kt)("p",null,"Set the hook fee & referral reward params. Only callable by the owner."),(0,r.kt)("h4",{id:"parameters-12"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"newHookFeeModifier")),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"The new hook fee modifier. 6 decimals.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"newReferralRewardModifier")),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"The new referral reward modifier. 6 decimals.")))),(0,r.kt)("h3",{id:"setamammenabledoverride"},"setAmAmmEnabledOverride"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function setAmAmmEnabledOverride(\n    PoolId id,\n    BoolOverride boolOverride\n) external\n")),(0,r.kt)("p",null,"Overrides amAmmEnabled for the given pool. Only callable by the owner."),(0,r.kt)("h4",{id:"parameters-13"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"PoolId"),(0,r.kt)("td",{parentName:"tr",align:null},"The pool id")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolOverride")),(0,r.kt)("td",{parentName:"tr",align:null},"BoolOverride"),(0,r.kt)("td",{parentName:"tr",align:null},"The new override value")))),(0,r.kt)("h3",{id:"setglobalamammenabledoverride"},"setGlobalAmAmmEnabledOverride"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function setGlobalAmAmmEnabledOverride(\n    BoolOverride boolOverride\n) external\n")),(0,r.kt)("p",null,"Overrides amAmmEnabled for all pools. Only callable by the owner."),(0,r.kt)("h4",{id:"parameters-14"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolOverride")),(0,r.kt)("td",{parentName:"tr",align:null},"BoolOverride"),(0,r.kt)("td",{parentName:"tr",align:null},"The new override value")))),(0,r.kt)("h3",{id:"rebalanceorderprehook"},"rebalanceOrderPreHook"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function rebalanceOrderPreHook(\n    RebalanceOrderHookArgs calldata hookArgs\n) external\n")),(0,r.kt)("p",null,"Called by the FloodPlain contract prior to executing a rebalance order. Should ensure the hook has exactly ",(0,r.kt)("inlineCode",{parentName:"p"},"hookArgs.preHookArgs.amount")," tokens of ",(0,r.kt)("inlineCode",{parentName:"p"},"hookArgs.preHookArgs.currency")," upon return."),(0,r.kt)("h4",{id:"parameters-15"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"hookArgs")),(0,r.kt)("td",{parentName:"tr",align:null},"RebalanceOrderHookArgs"),(0,r.kt)("td",{parentName:"tr",align:null},"The rebalance order hook arguments")))),(0,r.kt)("h3",{id:"rebalanceorderposthook"},"rebalanceOrderPostHook"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function rebalanceOrderPostHook(\n    RebalanceOrderHookArgs calldata hookArgs\n) external\n")),(0,r.kt)("p",null,"Called by the FloodPlain contract after executing a rebalance order. Should transfer any output tokens from the order to BunniHub and update pool balances."),(0,r.kt)("h4",{id:"parameters-16"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"hookArgs")),(0,r.kt)("td",{parentName:"tr",align:null},"RebalanceOrderHookArgs"),(0,r.kt)("td",{parentName:"tr",align:null},"The rebalance order hook arguments")))),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("h3",{id:"swap"},"Swap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event Swap(\n    PoolId indexed id,\n    address indexed sender,\n    bool zeroForOne,\n    uint256 inputAmount,\n    uint256 outputAmount,\n    uint160 sqrtPriceX96,\n    int24 tick,\n    uint24 fee,\n    uint256 totalLiquidity\n)\n")),(0,r.kt)("p",null,"Emitted for swaps between currency0 and currency1."),(0,r.kt)("h4",{id:"parameters-17"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"PoolId"),(0,r.kt)("td",{parentName:"tr",align:null},"The abi encoded hash of the pool key struct for the pool that was modified")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sender")),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address that initiated the swap call, and that received the callback")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"zeroForOne")),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"True if swapping token0 for token1, false otherwise")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"inputAmount")),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The input token amount")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"outputAmount")),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The output token amount")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sqrtPriceX96")),(0,r.kt)("td",{parentName:"tr",align:null},"uint160"),(0,r.kt)("td",{parentName:"tr",align:null},"The sqrt(price) of the pool after the swap, as a Q64.96")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"tick")),(0,r.kt)("td",{parentName:"tr",align:null},"int24"),(0,r.kt)("td",{parentName:"tr",align:null},"The log base 1.0001 of the price of the pool after the swap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fee")),(0,r.kt)("td",{parentName:"tr",align:null},"uint24"),(0,r.kt)("td",{parentName:"tr",align:null},"The swap fee rate charged, 6 decimals")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"totalLiquidity")),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The total virtual liquidity of the pool during and after the swap")))),(0,r.kt)("h3",{id:"setzone-1"},"SetZone"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event SetZone(IZone zone)\n")),(0,r.kt)("p",null,"Emitted when the FloodZone contract address is set."),(0,r.kt)("h4",{id:"parameters-18"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"zone")),(0,r.kt)("td",{parentName:"tr",align:null},"IZone"),(0,r.kt)("td",{parentName:"tr",align:null},"The new FloodZone contract address")))),(0,r.kt)("h3",{id:"setmodifiers-1"},"SetModifiers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event SetModifiers(uint32 indexed hookFeeModifier, uint32 indexed referrerRewardModifier)\n")),(0,r.kt)("p",null,"Emitted when the hook fee and referral reward modifiers are set."),(0,r.kt)("h4",{id:"parameters-19"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"hookFeeModifier")),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"The new hook fee modifier")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"referrerRewardModifier")),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"The new referral reward modifier")))),(0,r.kt)("h3",{id:"setamammenabledoverride-1"},"SetAmAmmEnabledOverride"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event SetAmAmmEnabledOverride(PoolId indexed id, BoolOverride indexed boolOverride)\n")),(0,r.kt)("p",null,"Emitted when the am-AMM enabled override is set for a specific pool."),(0,r.kt)("h4",{id:"parameters-20"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"PoolId"),(0,r.kt)("td",{parentName:"tr",align:null},"The pool id")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolOverride")),(0,r.kt)("td",{parentName:"tr",align:null},"BoolOverride"),(0,r.kt)("td",{parentName:"tr",align:null},"The new override value")))),(0,r.kt)("h3",{id:"setglobalamammenabledoverride-1"},"SetGlobalAmAmmEnabledOverride"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event SetGlobalAmAmmEnabledOverride(BoolOverride indexed boolOverride)\n")),(0,r.kt)("p",null,"Emitted when the global am-AMM enabled override is set."),(0,r.kt)("h4",{id:"parameters-21"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolOverride")),(0,r.kt)("td",{parentName:"tr",align:null},"BoolOverride"),(0,r.kt)("td",{parentName:"tr",align:null},"The new override value")))),(0,r.kt)("h3",{id:"swap-1"},"Swap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event Swap(\n    PoolId indexed id,\n    address indexed sender,\n    bool zeroForOne,\n    uint256 inputAmount,\n    uint256 outputAmount,\n    uint160 sqrtPriceX96,\n    int24 tick,\n    uint24 fee,\n    uint256 totalLiquidity\n)\n")),(0,r.kt)("p",null,"Emitted for swaps between currency0 and currency1."),(0,r.kt)("h4",{id:"parameters-22"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"PoolId"),(0,r.kt)("td",{parentName:"tr",align:null},"The abi encoded hash of the pool key struct for the pool that was modified")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sender")),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address that initiated the swap call, and that received the callback")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"zeroForOne")),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"True if swapping token0 for token1, false otherwise")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"inputAmount")),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The input token amount")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"outputAmount")),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The output token amount")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sqrtPriceX96")),(0,r.kt)("td",{parentName:"tr",align:null},"uint160"),(0,r.kt)("td",{parentName:"tr",align:null},"The sqrt(price) of the pool after the swap, as a Q64.96")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"tick")),(0,r.kt)("td",{parentName:"tr",align:null},"int24"),(0,r.kt)("td",{parentName:"tr",align:null},"The log base 1.0001 of the price of the pool after the swap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fee")),(0,r.kt)("td",{parentName:"tr",align:null},"uint24"),(0,r.kt)("td",{parentName:"tr",align:null},"The swap fee rate charged, 6 decimals")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"totalLiquidity")),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The total virtual liquidity of the pool during and after the swap")))),(0,r.kt)("h3",{id:"setzone-2"},"SetZone"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event SetZone(IZone zone)\n")),(0,r.kt)("p",null,"Emitted when the FloodZone contract address is set."),(0,r.kt)("h4",{id:"parameters-23"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"zone")),(0,r.kt)("td",{parentName:"tr",align:null},"IZone"),(0,r.kt)("td",{parentName:"tr",align:null},"The new FloodZone contract address")))),(0,r.kt)("h3",{id:"sethookfeemodifier"},"SetHookFeeModifier"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event SetHookFeeModifier(uint88 indexed newModifier)\n")),(0,r.kt)("p",null,"Emitted when the hook fee modifier is set."),(0,r.kt)("h4",{id:"parameters-24"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"newModifier")),(0,r.kt)("td",{parentName:"tr",align:null},"uint88"),(0,r.kt)("td",{parentName:"tr",align:null},"The new fee modifier")))),(0,r.kt)("h3",{id:"setamammenabledoverride-2"},"SetAmAmmEnabledOverride"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event SetAmAmmEnabledOverride(PoolId indexed id, BoolOverride indexed boolOverride)\n")),(0,r.kt)("p",null,"Emitted when the am-AMM enabled override is set for a specific pool."),(0,r.kt)("h4",{id:"parameters-25"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"PoolId"),(0,r.kt)("td",{parentName:"tr",align:null},"The pool id")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolOverride")),(0,r.kt)("td",{parentName:"tr",align:null},"BoolOverride"),(0,r.kt)("td",{parentName:"tr",align:null},"The new override value")))),(0,r.kt)("h3",{id:"setglobalamammenabledoverride-2"},"SetGlobalAmAmmEnabledOverride"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event SetGlobalAmAmmEnabledOverride(BoolOverride indexed boolOverride)\n")),(0,r.kt)("p",null,"Emitted when the global am-AMM enabled override is set."),(0,r.kt)("h4",{id:"parameters-26"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolOverride")),(0,r.kt)("td",{parentName:"tr",align:null},"BoolOverride"),(0,r.kt)("td",{parentName:"tr",align:null},"The new override value")))))}k.isMDXComponent=!0}}]);