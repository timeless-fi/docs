"use strict";(self.webpackChunktimeless_docs=self.webpackChunktimeless_docs||[]).push([[4352],{3905:function(t,e,a){a.d(e,{Zo:function(){return d},kt:function(){return c}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function u(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var o=n.createContext({}),p=function(t){var e=n.useContext(o),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},d=function(t){var e=p(t.components);return n.createElement(o.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,d=u(t,["components","mdxType","originalType","parentName"]),m=p(a),c=r,k=m["".concat(o,".").concat(c)]||m[c]||s[c]||l;return a?n.createElement(k,i(i({ref:e},d),{},{components:a})):n.createElement(k,i({ref:e},d))}));function c(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=m;var u={};for(var o in e)hasOwnProperty.call(e,o)&&(u[o]=e[o]);u.originalType=t,u.mdxType="string"==typeof t?t:r,i[1]=u;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6963:function(t,e,a){a.r(e),a.d(e,{assets:function(){return d},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return s}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],u={},o="xPYT",p={unversionedId:"smart-contracts/xpyt/xPYT-Contract",id:"smart-contracts/xpyt/xPYT-Contract",title:"xPYT",description:"GitHub: link",source:"@site/docs/smart-contracts/xpyt/xPYT-Contract.md",sourceDirName:"smart-contracts/xpyt",slug:"/smart-contracts/xpyt/xPYT-Contract",permalink:"/docs/smart-contracts/xpyt/xPYT-Contract",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"UniswapV3xPYT",permalink:"/docs/smart-contracts/xpyt/UniswapV3xPYT"},next:{title:"xPYTFactory",permalink:"/docs/smart-contracts/xpyt/xPYTFactory"}},d={},s=[{value:"Errors",id:"errors",level:2},{value:"Error_InsufficientOutput",id:"error_insufficientoutput",level:3},{value:"Error_InvalidMultiplierValue",id:"error_invalidmultipliervalue",level:3},{value:"Error_ConsultTwapOracleFailed",id:"error_consulttwaporaclefailed",level:3},{value:"Events",id:"events",level:2},{value:"Pound",id:"pound",level:3},{value:"Enums",id:"enums",level:2},{value:"PreviewPoundErrorCode",id:"previewpounderrorcode",level:3},{value:"Constants",id:"constants",level:2},{value:"ONE",id:"one",level:3},{value:"Immutable parameters",id:"immutable-parameters",level:2},{value:"gate",id:"gate",level:3},{value:"vault",id:"vault",level:3},{value:"nyt",id:"nyt",level:3},{value:"minOutputMultiplier",id:"minoutputmultiplier",level:3},{value:"pounderRewardMultiplier",id:"pounderrewardmultiplier",level:3},{value:"assetBalance",id:"assetbalance",level:3},{value:"Public functions",id:"public-functions",level:2},{value:"pound",id:"pound-1",level:3},{value:"previewPound",id:"previewpound",level:3},{value:"sweep",id:"sweep",level:3},{value:"totalAssets",id:"totalassets",level:3},{value:"beforeWithdraw",id:"beforewithdraw",level:3},{value:"afterDeposit",id:"afterdeposit",level:3},{value:"Internal functions",id:"internal-functions",level:2},{value:"_getTwapQuote",id:"_gettwapquote",level:3},{value:"_swap",id:"_swap",level:3},{value:"_quote",id:"_quote",level:3}],m={toc:s};function c(t){var e=t.components,a=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"xpyt"},"xPYT"),(0,l.kt)("p",null,"GitHub: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/timeless-fi/xPYT/blob/main/src/xPYT.sol"},"link")),(0,l.kt)("p",null,"Permissionless auto-compounding vault for Timeless perpetual yield tokens"),(0,l.kt)("h2",{id:"errors"},"Errors"),(0,l.kt)("h3",{id:"error_insufficientoutput"},"Error_InsufficientOutput"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"error Error_InsufficientOutput()\n")),(0,l.kt)("h3",{id:"error_invalidmultipliervalue"},"Error_InvalidMultiplierValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"error Error_InvalidMultiplierValue()\n")),(0,l.kt)("h3",{id:"error_consulttwaporaclefailed"},"Error_ConsultTwapOracleFailed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"error Error_ConsultTwapOracleFailed()\n")),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)("h3",{id:"pound"},"Pound"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event Pound(address sender, address pounderRewardRecipient, uint256 yieldAmount, uint256 pytCompounded, uint256 pounderReward)\n")),(0,l.kt)("h2",{id:"enums"},"Enums"),(0,l.kt)("h3",{id:"previewpounderrorcode"},"PreviewPoundErrorCode"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"enum PreviewPoundErrorCode {\n  OK,\n  TWAP_FAIL,\n  INSUFFICIENT_OUTPUT\n}\n")),(0,l.kt)("h2",{id:"constants"},"Constants"),(0,l.kt)("h3",{id:"one"},"ONE"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 ONE\n")),(0,l.kt)("p",null,"The base unit for fixed point decimals."),(0,l.kt)("h2",{id:"immutable-parameters"},"Immutable parameters"),(0,l.kt)("h3",{id:"gate"},"gate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"contract Gate gate\n")),(0,l.kt)("p",null,"The Gate associated with the PYT."),(0,l.kt)("h3",{id:"vault"},"vault"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"address vault\n")),(0,l.kt)("p",null,"The vault associated with the PYT."),(0,l.kt)("h3",{id:"nyt"},"nyt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"contract NegativeYieldToken nyt\n")),(0,l.kt)("p",null,"The NYT associated with the PYT."),(0,l.kt)("h3",{id:"minoutputmultiplier"},"minOutputMultiplier"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 minOutputMultiplier\n")),(0,l.kt)("p",null,"The minimum acceptable ratio between the NYT output in pound() and the expected NYT output\nbased on the TWAP. Scaled by ONE."),(0,l.kt)("h3",{id:"pounderrewardmultiplier"},"pounderRewardMultiplier"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 pounderRewardMultiplier\n")),(0,l.kt)("p",null,"The proportion of the yield claimed in pound() to give to the caller as reward. Scaled by ONE."),(0,l.kt)("h3",{id:"assetbalance"},"assetBalance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 assetBalance\n")),(0,l.kt)("p",null,"The recorded balance of the deposited asset."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This is used instead of asset.balanceOf(address(this)) to prevent attackers from\natomically increasing the vault share value and thus exploiting integrated lending protocols.")),(0,l.kt)("h2",{id:"public-functions"},"Public functions"),(0,l.kt)("h3",{id:"pound-1"},"pound"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function pound(address pounderRewardRecipient) external virtual returns (uint256 yieldAmount, uint256 pytCompounded, uint256 pounderReward)\n")),(0,l.kt)("p",null,"Claims the yield earned by the PYT held and sells the claimed NYT into more PYT."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Part of the claimed yield is given to the caller as reward, which incentivizes MEV bots\nto perform the auto-compounding for us.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pounderRewardRecipient"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address that will receive the caller reward")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yieldAmount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of PYT & NYT claimed as yield")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pytCompounded"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of PYT distributed to xPYT holders")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pounderReward"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of caller reward given, in PYT")))),(0,l.kt)("h3",{id:"previewpound"},"previewPound"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function previewPound() external returns (enum xPYT.PreviewPoundErrorCode errorCode, uint256 yieldAmount, uint256 pytCompounded, uint256 pounderReward)\n")),(0,l.kt)("p",null,"Previews the result of calling pound()"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"errorCode"),(0,l.kt)("td",{parentName:"tr",align:null},"enum xPYT.PreviewPoundErrorCode"),(0,l.kt)("td",{parentName:"tr",align:null},"The end state of pound()")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yieldAmount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of PYT & NYT claimed as yield")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pytCompounded"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of PYT distributed to xPYT holders")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pounderReward"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of caller reward given, in PYT")))),(0,l.kt)("h3",{id:"sweep"},"sweep"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function sweep(address receiver) external virtual returns (uint256 shares)\n")),(0,l.kt)("p",null,"Uses the extra asset balance of the xPYT contract to mint shares"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"receiver"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The recipient of the minted shares")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"shares"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of shares minted")))),(0,l.kt)("h3",{id:"totalassets"},"totalAssets"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function totalAssets() public view virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"beforewithdraw"},"beforeWithdraw"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function beforeWithdraw(uint256 assets, uint256) internal virtual\n")),(0,l.kt)("h3",{id:"afterdeposit"},"afterDeposit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function afterDeposit(uint256 assets, uint256) internal virtual\n")),(0,l.kt)("h2",{id:"internal-functions"},"Internal functions"),(0,l.kt)("h3",{id:"_gettwapquote"},"_getTwapQuote"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _getTwapQuote(uint256 nytAmountIn) internal view virtual returns (bool success, uint256 xPytAmountOut)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Consults the TWAP oracle to get a quote for how much xPYT will be received from swapping\n",(0,l.kt)("inlineCode",{parentName:"em"},"nytAmountIn")," NYT.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nytAmountIn"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of NYT to swap")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"success"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"True if the call to the TWAP oracle was successful, false otherwise")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"xPytAmountOut"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of xPYT that will be received from the swap")))),(0,l.kt)("h3",{id:"_swap"},"_swap"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _swap(uint256 nytAmountIn) internal virtual returns (uint256 xPytAmountOut)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Swaps ",(0,l.kt)("inlineCode",{parentName:"em"},"nytAmountIn")," NYT into xPYT using the underlying DEX")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nytAmountIn"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of NYT to swap")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"xPytAmountOut"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of xPYT received from the swap")))),(0,l.kt)("h3",{id:"_quote"},"_quote"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _quote(uint256 nytAmountIn) internal virtual returns (uint256 xPytAmountOut)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Gets a quote from the underlying DEX for swapping ",(0,l.kt)("inlineCode",{parentName:"em"},"nytAmountIn")," NYT into xPYT")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nytAmountIn"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of NYT to swap")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"xPytAmountOut"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of xPYT that will be received from the swap")))))}c.isMDXComponent=!0}}]);